# Generated by Django 4.2.16 on 2025-07-20 18:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserSession",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_id",
                    models.CharField(
                        help_text="Unique session identifier",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("web", "Web Browser"),
                            ("mobile", "Mobile App"),
                            ("api", "API Access"),
                            ("desktop", "Desktop App"),
                        ],
                        default="web",
                        max_length=20,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="User's IP address"),
                ),
                ("user_agent", models.TextField(help_text="Browser user agent string")),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("desktop", "Desktop Computer"),
                            ("mobile", "Mobile Device"),
                            ("tablet", "Tablet"),
                            ("unknown", "Unknown Device"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "browser_name",
                    models.CharField(
                        blank=True,
                        help_text="Browser name (Chrome, Firefox, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "browser_version",
                    models.CharField(
                        blank=True, help_text="Browser version", max_length=50
                    ),
                ),
                (
                    "operating_system",
                    models.CharField(
                        blank=True, help_text="Operating system", max_length=100
                    ),
                ),
                (
                    "screen_resolution",
                    models.CharField(
                        blank=True,
                        help_text="Screen resolution (e.g., 1920x1080)",
                        max_length=20,
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="Country based on IP", max_length=100
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, help_text="City based on IP", max_length=100
                    ),
                ),
                (
                    "user_timezone",
                    models.CharField(
                        blank=True, help_text="User's timezone", max_length=50
                    ),
                ),
                ("session_start", models.DateTimeField(auto_now_add=True)),
                (
                    "session_end",
                    models.DateTimeField(
                        blank=True, help_text="When session ended", null=True
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last recorded activity"
                    ),
                ),
                (
                    "duration_seconds",
                    models.IntegerField(
                        default=0, help_text="Total session duration in seconds"
                    ),
                ),
                (
                    "page_views",
                    models.IntegerField(default=0, help_text="Number of pages viewed"),
                ),
                (
                    "actions_performed",
                    models.IntegerField(
                        default=0, help_text="Number of actions performed"
                    ),
                ),
                (
                    "data_sources_accessed",
                    models.IntegerField(
                        default=0, help_text="Number of data sources accessed"
                    ),
                ),
                (
                    "queries_executed",
                    models.IntegerField(
                        default=0, help_text="Number of queries executed"
                    ),
                ),
                (
                    "files_uploaded",
                    models.IntegerField(
                        default=0, help_text="Number of files uploaded"
                    ),
                ),
                (
                    "insights_generated",
                    models.IntegerField(
                        default=0, help_text="Number of insights generated"
                    ),
                ),
                (
                    "is_bounce",
                    models.BooleanField(
                        default=False,
                        help_text="True if user left without meaningful interaction",
                    ),
                ),
                (
                    "is_active_session",
                    models.BooleanField(
                        default=True, help_text="Whether session is currently active"
                    ),
                ),
                (
                    "referrer_url",
                    models.URLField(
                        blank=True, help_text="URL that referred user to the app"
                    ),
                ),
                (
                    "entry_page",
                    models.CharField(
                        blank=True, help_text="First page user visited", max_length=255
                    ),
                ),
                (
                    "exit_page",
                    models.CharField(
                        blank=True, help_text="Last page user visited", max_length=255
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-session_start"],
            },
        ),
        migrations.CreateModel(
            name="UserPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("default_query_timeout", models.IntegerField(default=300)),
                ("default_max_rows_preview", models.IntegerField(default=1000)),
                ("default_connection_timeout", models.IntegerField(default=30)),
                (
                    "preferred_date_format",
                    models.CharField(default="YYYY-MM-DD", max_length=50),
                ),
                (
                    "preferred_number_format",
                    models.CharField(default="en-US", max_length=50),
                ),
                ("show_system_tables", models.BooleanField(default=False)),
                ("auto_refresh_schema", models.BooleanField(default=True)),
                ("anonymize_sample_data", models.BooleanField(default=True)),
                ("log_query_history", models.BooleanField(default=True)),
                ("share_usage_analytics", models.BooleanField(default=False)),
                ("notify_connection_errors", models.BooleanField(default=True)),
                ("notify_schema_changes", models.BooleanField(default=True)),
                ("notify_query_completion", models.BooleanField(default=False)),
                ("custom_settings", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Preferences",
                "verbose_name_plural": "User Preferences",
            },
        ),
        migrations.CreateModel(
            name="ErrorLog",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "error_level",
                    models.CharField(
                        choices=[
                            ("debug", "Debug"),
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "error_category",
                    models.CharField(
                        choices=[
                            ("authentication", "Authentication"),
                            ("data_processing", "Data Processing"),
                            ("database", "Database"),
                            ("api", "API"),
                            ("ui", "User Interface"),
                            ("integration", "Integration"),
                            ("performance", "Performance"),
                            ("validation", "Validation"),
                            ("system", "System"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "error_code",
                    models.CharField(
                        blank=True,
                        help_text="Application-specific error code",
                        max_length=50,
                    ),
                ),
                ("error_message", models.TextField(help_text="Error message")),
                (
                    "error_details",
                    models.TextField(
                        blank=True, help_text="Detailed error information"
                    ),
                ),
                (
                    "url",
                    models.URLField(blank=True, help_text="URL where error occurred"),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="User agent string"),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "stack_trace",
                    models.TextField(blank=True, help_text="Stack trace if available"),
                ),
                (
                    "request_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Request data that caused error",
                    ),
                ),
                (
                    "response_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Response data if available"
                    ),
                ),
                (
                    "is_resolved",
                    models.BooleanField(
                        default=False, help_text="Whether error has been resolved"
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True, help_text="Notes about error resolution"
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, help_text="When error was resolved", null=True
                    ),
                ),
                (
                    "occurrence_count",
                    models.IntegerField(
                        default=1, help_text="Number of times this error occurred"
                    ),
                ),
                ("first_occurred", models.DateTimeField(auto_now_add=True)),
                ("last_occurred", models.DateTimeField(auto_now=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who resolved the error",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_errors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="error_logs",
                        to="api.usersession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="error_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Error Log",
                "verbose_name_plural": "Error Logs",
                "ordering": ["-last_occurred"],
            },
        ),
        migrations.CreateModel(
            name="ChatSession",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Session title (auto-generated or user-defined)",
                        max_length=255,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this session is currently active",
                    ),
                ),
                (
                    "message_count",
                    models.IntegerField(
                        default=0, help_text="Total number of messages in this session"
                    ),
                ),
                (
                    "system_prompt",
                    models.TextField(
                        blank=True, help_text="Custom system prompt for this session"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Session",
                "verbose_name_plural": "Chat Sessions",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("user", "User Message"),
                            ("assistant", "Assistant Message"),
                            ("system", "System Message"),
                            ("error", "Error Message"),
                        ],
                        max_length=20,
                    ),
                ),
                ("content", models.TextField(help_text="Message content")),
                (
                    "processing_time_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="Time taken to process this message",
                        null=True,
                    ),
                ),
                (
                    "tokens_used",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of tokens used for AI processing",
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata for this message (model info, usage stats, etc.)",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="api.chatsession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Message",
                "verbose_name_plural": "Chat Messages",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["user", "-session_start"], name="api_userses_user_id_fb39ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["session_id"], name="api_userses_session_8397e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["is_active_session"], name="api_userses_is_acti_8a7df0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["session_start"], name="api_userses_session_07c949_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["device_type"], name="api_userses_device__e7578d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["country"], name="api_userses_country_c28bfd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["is_bounce"], name="api_userses_is_boun_04fa77_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="errorlog",
            index=models.Index(
                fields=["error_level", "-last_occurred"],
                name="api_errorlo_error_l_274726_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="errorlog",
            index=models.Index(
                fields=["error_category", "-last_occurred"],
                name="api_errorlo_error_c_caa350_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="errorlog",
            index=models.Index(
                fields=["user", "-last_occurred"], name="api_errorlo_user_id_8a36ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="errorlog",
            index=models.Index(
                fields=["is_resolved"], name="api_errorlo_is_reso_998040_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="errorlog",
            index=models.Index(
                fields=["error_code"], name="api_errorlo_error_c_53acc4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["user", "-updated_at"], name="api_chatses_user_id_0cbf6b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["is_active"], name="api_chatses_is_acti_c6781d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["session", "created_at"], name="api_chatmes_session_2462c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["user", "-created_at"], name="api_chatmes_user_id_5926d3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["message_type"], name="api_chatmes_message_15efba_idx"
            ),
        ),
    ]
